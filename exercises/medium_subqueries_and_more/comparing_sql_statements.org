* Comparing SQL statements
:PROPERTIES:
:header-args: sql :engine postgresql :dbuser nico :database auction
:END:

Comparing SQL Statements
In this exercise, we'll use EXPLAIN ANALYZE to compare the efficiency of two SQL statements. These two statements are actually from the "Query From a Virtual Table" exercise in this set. In that exercise, we stated that our subquery-based solution:

SELECT MAX(bid_counts.count) FROM
  (SELECT COUNT(bidder_id) FROM bids GROUP BY bidder_id) AS bid_counts;
was actually faster than the simpler equivalent without subqueries:

SELECT COUNT(bidder_id) AS max_bid FROM bids
  GROUP BY bidder_id
  ORDER BY max_bid DESC
  LIMIT 1;
In this exercise, we will demonstrate this fact.

Run EXPLAIN ANALYZE on the two statements above. Compare the planning time, execution time, and the total time required to run these two statements. Also compare the total "costs". Which statement is more efficient and why?


#+BEGIN_SRC sql
  explain analyze
  SELECT MAX(bid_counts.count) FROM
    (SELECT COUNT(bidder_id) FROM bids GROUP BY bidder_id) AS bid_counts;
#+END_SRC

#+RESULTS:
| QUERY PLAN                                                                                            |
|-------------------------------------------------------------------------------------------------------|
| Aggregate  (cost=37.15..37.16 rows=1 width=8) (actual time=0.018..0.018 rows=1 loops=1)               |
| ->  HashAggregate  (cost=32.65..34.65 rows=200 width=12) (actual time=0.014..0.016 rows=6 loops=1)    |
| Group Key: bids.bidder_id                                                                             |
| ->  Seq Scan on bids  (cost=0.00..25.10 rows=1510 width=4) (actual time=0.003..0.005 rows=26 loops=1) |
| Planning time: 0.245 ms                                                                               |
| Execution time: 0.092 ms                                                                              |
compared against

#+BEGIN_SRC sql
  explain analyze
  SELECT COUNT(bidder_id) AS max_bid FROM bids
    GROUP BY bidder_id
    ORDER BY max_bid DESC
    LIMIT 1;
#+END_SRC

#+RESULTS:
| QUERY PLAN                                                                                            |
|-------------------------------------------------------------------------------------------------------|
| Limit  (cost=35.65..35.65 rows=1 width=12) (actual time=0.033..0.033 rows=1 loops=1)                  |
| ->  Sort  (cost=35.65..36.15 rows=200 width=12) (actual time=0.032..0.032 rows=1 loops=1)             |
| Sort Key: (count(bidder_id)) DESC                                                                     |
| Sort Method: top-N heapsort  Memory: 25kB                                                             |
| ->  HashAggregate  (cost=32.65..34.65 rows=200 width=12) (actual time=0.016..0.018 rows=6 loops=1)    |
| Group Key: bidder_id                                                                                  |
| ->  Seq Scan on bids  (cost=0.00..25.10 rows=1510 width=4) (actual time=0.005..0.007 rows=26 loops=1) |
| Planning time: 0.240 ms                                                                               |
| Execution time: 0.101 ms                                                                              |

About a ten percent difference.


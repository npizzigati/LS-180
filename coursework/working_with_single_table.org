* Working with a single table
:PROPERTIES:
:header-args: sql :engine postgresql :dbuser nico :database single_table
:END:

** 1. Write a SQL statement that will create the following table, people:
| name      | age | occupation |
| Abby      |  34 | biologist  |
| Mu'nisah  |  26 | NULL       |
| Mirabelle |  40 | contractor |

#+begin_src sql
  CREATE TABLE people(
  id serial PRIMARY KEY,
  name varchar(30),
  age int,
  occupation varchar(30));
#+end_src

#+RESULTS:
| CREATE TABLE |
|--------------|

** 2. Write a SQL statement to insert the data in the table.
#+begin_src sql
  INSERT INTO people (name, age, occupation)
  VALUES ('Abby', 34, 'biologist'),
  ('Mu''nisah', 26, NULL),
  ('Mirabelle', 40, 'contractor');
#+end_src
#+RESULTS:
| INSERT 0 3 |
|------------|

** 3. Write 3 SQL queries that can be used to retrieve the second row of the table shown in #1 and #2.
#+begin_src sql
    SELECT name, age, occupation
    FROM people
    WHERE age = 26;
#+end_src

#+RESULTS:
| name     | age | occupation |
|----------+-----+------------|
| Mu'nisah |  26 |            |

** 3b
#+begin_src sql
  SELECT * FROM people LIMIT 1 OFFSET 1;
#+end_src

#+RESULTS:
| id | name     | age | occupation |
|----+----------+-----+------------|
|  2 | Mu'nisah |  26 |            |

** 3c
#+begin_src sql
  SELECT * FROM people WHERE occupation IS NULL;
#+end_src

#+RESULTS:
| id | name     | age | occupation |
|----+----------+-----+------------|
|  2 | Mu'nisah |  26 |            |

** 4. Write a SQL statement that will create a table named birds that can hold the following values:
| name              | length | wingspan | family       | extinct |
| Spotted Towhee    |   21.6 |     26.7 | Emberizidae  | f       |
| American Robin    |   25.5 |     36.0 | Turdidae     | f       |
| Greater Koa Finch |   19.0 |     24.0 | Fringillidae | t       |
| Carolina Parakeet |   33.0 |     55.8 | Psittacidae  | t       |
| Common Kestrel    |   35.5 |     73.5 | Falconidae   | f       |

#+begin_src sql
    CREATE TABLE birds(
    name varchar(100),
    length DECIMAL(3,1),
    wingspan DECIMAL(3,1),
    family varchar(100),
    extinct BOOLEAN);
#+end_src

#+RESULTS:
| CREATE TABLE |
|--------------|

** 5. Insert the data as shown in the table

#+begin_src sql
  INSERT INTO birds (name, length, wingspan, family, extinct)
  VALUES ('Spotted Towhee', 21.6, 26.7, 'Emberizidae', false),
  ('American Robin', 25.5, 36.0, 'Turdidae', false),
  ('Greater Koa Finch', 19.0, 24.0, 'Fringillidae', true),
  ('Carolina Parakeet', 33.0, 55.8, 'Psittacidae', true),
  ('Common Kestrel', 35.5, 73.5, 'Falconidae', false);
#+end_src

#+RESULTS:
| INSERT 0 5 |
|------------|

** 6. Write a SQL statement that finds the names and families for all birds that are not extinct, in order from longest to shortest (based on the length column's value).

#+begin_src sql
    SELECT name, family
    FROM birds
    WHERE extinct = false
    ORDER BY length DESC;
#+end_src

#+RESULTS:
| name           | family      |
|----------------+-------------|
| Common Kestrel | Falconidae  |
| American Robin | Turdidae    |
| Spotted Towhee | Emberizidae |

** 7. Use SQL to determine the average, minimum, and maximum wingspan for the birds shown in the table.

#+begin_src sql
  SELECT round(AVG(wingspan), 1) AS "average wingspan",
  MIN(wingspan) AS "minimum wingspan",
  MAX(wingspan) AS "maximum wingspan"
  FROM birds
#+end_src

#+RESULTS:
| average wingspan | minimum wingspan | maximum wingspan |
|------------------+------------------+------------------|
|             43.2 |             24.0 |             73.5 |

** 8. Write a SQL statement to create the table shown below, menu_items:

| item     | prep_time | ingredient_cost | sales | menu_price |
| omelette |        10 |            1.50 |   182 |       7.99 |
| tacos    |         5 |            2.00 |   254 |       8.99 |
| oatmeal  |         1 |            0.50 |    79 |       5.99 |

#+begin_src sql
    CREATE TABLE menu_items(
    item varchar(50),
    prep_time int,
    ingredient_cost decimal(3,2),
    sales int,
    menu_price decimal(3,2));
#+end_src

#+RESULTS:
| CREATE TABLE |
|--------------|

** 9. Write SQL statements to insert the data shown in #8 into the table.

#+begin_src sql
    INSERT INTO menu_items
    VALUES
    ('omelette', 10, 1.50, 182, 7.99),
    ('tacos', 5, 2.00, 254, 8.99),
    ('oatmeal', 1, 0.50, 79, 5.99)
#+end_src

#+RESULTS:
| INSERT 0 3 |
|------------|

** 10. Using the table and data from #8 and #9, write a SQL query to determine which menu item is the most profitable based on the cost of its ingredients, returning the name of the item and its profit.

#+begin_src sql
    SELECT item, (menu_price - ingredient_cost) AS profit
    FROM menu_items
    ORDER BY profit DESC
    LIMIT 1
#+end_src

#+RESULTS:
| item  | profit |
|-------+--------|
| tacos |   6.99 |

** 11. Write a SQL query to determine how profitable each item on the menu is based on the amount of time it takes to prepare one item. Assume that whoever is preparing the food is being paid $13 an hour. List the most profitable items first. Keep in mind that prep_time is represented in minutes and ingredient_cost and menu_price are in dollars and cents):

#+begin_src sql
  SELECT item, menu_price, ingredient_cost,
  round(prep_time * 13.0 / 60.0, 2) AS labor,
  (menu_price - ingredient_cost - round(prep_time * 13.0 / 60.0, 2)) AS profit
    FROM menu_items
  ORDER BY profit DESC;
#+end_src

#+RESULTS:
| item     | menu_price | ingredient_cost | labor | profit |
|----------+------------+-----------------+-------+--------|
| tacos    |       8.99 |            2.00 |  1.08 |   5.91 |
| oatmeal  |       5.99 |            0.50 |  0.22 |   5.27 |
| omelette |       7.99 |            1.50 |  2.17 |   4.32 |


* More constraints
:PROPERTIES:
:header-args: sql :engine postgresql :dbuser nico :database more_constraints
:END:
** Modify all of the columns to be NOT NULL.


#+BEGIN_SRC sql
  ALTER table films
  ALTER COLUMN title SET NOT NULL,
  alter COLUMN year set NOT NULL,    
  alter COLUMN genre set NOT NULL,   
  alter COLUMN director set NOT NULL,
  alter COLUMN duration set NOT NULL;
#+END_SRC

#+RESULTS:
| ALTER TABLE |
|-------------|
** Add a constraint to the table films that ensures that all films have a unique title.


#+BEGIN_SRC sql
    ALTER TABLE films
    ADD UNIQUE(title);
#+END_SRC

#+RESULTS:
| ALTER TABLE |
|-------------|
** Write a SQL statement to remove the constraint added in #4.


#+BEGIN_SRC sql
    ALTER TABLE films
    DROP CONSTRAINT films_title_key;
#+END_SRC

#+RESULTS:
| ALTER TABLE |
|-------------|
** Add a constraint to films that requires all rows to have a value for title that is at least 1 character long.


#+BEGIN_SRC sql
  ALTER TABLE films
  ADD CONSTRAINT title_length CHECK(length(title) > 1);
#+END_SRC

#+RESULTS:
| ALTER TABLE |
|-------------|
** What error is shown if the constraint created in #7 is violated? Write a SQL INSERT statement that demonstrates this.


#+BEGIN_SRC sql
    INSERT INTO films (title, year, genre, director, duration)
    VALUES
    ('', 1900, '', '', 3);
#+END_SRC

#+RESULTS:
|---|
** Write a SQL statement to remove the constraint added in #7.


#+BEGIN_SRC sql
    ALTER TABLE films
    DROP CONSTRAINT title_length;
#+END_SRC

#+RESULTS:
| ALTER TABLE |
|-------------|
** Add a constraint to the table films that ensures that all films have a year between 1900 and 2100.


#+BEGIN_SRC sql
    ALTER TABLE films
    ADD CONSTRAINT modern_year CHECK(year BETWEEN 1900 AND 2100);
#+END_SRC

#+RESULTS:
| ALTER TABLE |
|-------------|
** Add a constraint to films that requires all rows to have a value for director that is at least 3 characters long and contains at least one space character ().


#+BEGIN_SRC sql
    ALTER TABLE films
    ADD CONSTRAINT director_length
    CHECK(length(director) > 2 AND director LIKE '% %');
#+END_SRC

#+RESULTS:
| ALTER TABLE |
|-------------|
** Write an UPDATE statement that attempts to change the director for "Die Hard" to "Johnny". Show the error that occurs when this statement is executed.


#+BEGIN_SRC sql
    UPDATE films
    SET director = 'Johnny'
    WHERE title = 'Die Hard';
#+END_SRC

#+RESULTS:
|---|
** List three ways to use the schema to restrict what values can be stored in a column.

check constraint
not null
data type (which can contain length restriction
** Is it possible to define a default value for a column that will be considered invalid by a constraint? Create a table that tests this.


#+BEGIN_SRC sql
  CREATE TABLE test_invalid_default(
  age int DEFAULT 5
  CHECK(age > 5));
#+END_SRC

#+RESULTS:
| CREATE TABLE |
|--------------|
It is possible, but any insert using default value will fail
